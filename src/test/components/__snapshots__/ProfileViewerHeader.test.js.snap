// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`calltree/ProfileViewerHeader renders the header 1`] = `
<div
  className="profileViewerHeader"
  onMouseDown={[Function]}
  onMouseMove={[Function]}
>
  <div
    className="profileViewerHeaderTimeRuler"
  >
    <ol
      className="timeRulerContainer"
    >
      <li
        className="timeRulerNotch"
        style={
          Object {
            "left": "0px",
          }
        }
      >
        <span
          className="timeRulerNotchText"
        >
          0.000s
        </span>
      </li>
      <li
        className="timeRulerNotch"
        style={
          Object {
            "left": "66.66666666666667px",
          }
        }
      >
        <span
          className="timeRulerNotchText"
        >
          0.002s
        </span>
      </li>
      <li
        className="timeRulerNotch"
        style={
          Object {
            "left": "133.33333333333334px",
          }
        }
      >
        <span
          className="timeRulerNotchText"
        >
          0.004s
        </span>
      </li>
      <li
        className="timeRulerNotch"
        style={
          Object {
            "left": "200px",
          }
        }
      >
        <span
          className="timeRulerNotchText"
        >
          0.006s
        </span>
      </li>
      <li
        className="timeRulerNotch"
        style={
          Object {
            "left": "266.6666666666667px",
          }
        }
      >
        <span
          className="timeRulerNotchText"
        >
          0.008s
        </span>
      </li>
    </ol>
  </div>
  <div
    className="overflowEdgeIndicator profileViewerHeaderOverflowEdgeIndicator"
  >
    <div
      className="overflowEdgeIndicatorEdge topEdge"
    />
    <div
      className="overflowEdgeIndicatorEdge rightEdge"
    />
    <div
      className="overflowEdgeIndicatorEdge bottomEdge"
    />
    <div
      className="overflowEdgeIndicatorEdge leftEdge"
    />
    <div
      className="overflowEdgeIndicatorScrollbox profileViewerHeaderOverflowEdgeIndicatorScrollbox"
      onScroll={[Function]}
    >
      <div
        className="overflowEdgeIndicatorContentsWrapper"
      >
        <ol
          className="profileViewerHeaderThreadList"
          onMouseDown={[Function]}
        >
          <li
            className="profileThreadHeaderBar selected"
            onClick={[Function]}
            style={undefined}
          >
            <div
              className="react-contextmenu-wrapper grippy profileThreadHeaderBarThreadLabel"
              onContextMenu={[Function]}
              onMouseDown={[Function]}
              onMouseOut={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchStart={[Function]}
              title="thread: \\"Main Thread\\" (0)
process: \\"default\\" (0)"
            >
              <h1
                className="profileThreadHeaderBarThreadName"
              >
                Main Thread
              </h1>
            </div>
            <div
              className="profileThreadHeaderBarThreadDetails"
            >
              <div
                className="profileThreadHeaderBarIntervalMarkerOverview profileThreadHeaderBarIntervalMarkerOverviewJank selected"
              >
                <canvas
                  className="profileThreadHeaderBarIntervalMarkerOverviewCanvas profileThreadHeaderBarIntervalMarkerOverviewJankCanvas intervalMarkerTimelineCanvas"
                  onMouseDown={[Function]}
                  onMouseMove={[Function]}
                  onMouseOut={[Function]}
                  onMouseUp={[Function]}
                />
              </div>
              <div
                className="threadStackGraph"
              >
                <canvas
                  className="threadStackGraphCanvas threadStackGraphCanvas"
                  onMouseUp={[Function]}
                />
              </div>
              <div
                className="headerEmptyThreadIndicator"
              />
            </div>
          </li>
          <li
            className="profileThreadHeaderBar"
            onClick={[Function]}
            style={undefined}
          >
            <div
              className="react-contextmenu-wrapper grippy profileThreadHeaderBarThreadLabel"
              onContextMenu={[Function]}
              onMouseDown={[Function]}
              onMouseOut={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchStart={[Function]}
              title="thread: \\"Thread with dropped samples\\" (0)
process: \\"default\\" (0)"
            >
              <h1
                className="profileThreadHeaderBarThreadName"
              >
                Thread with dropped samples
              </h1>
            </div>
            <div
              className="profileThreadHeaderBarThreadDetails"
            >
              <div
                className="profileThreadHeaderBarIntervalMarkerOverview profileThreadHeaderBarIntervalMarkerOverviewJank"
              >
                <canvas
                  className="profileThreadHeaderBarIntervalMarkerOverviewCanvas profileThreadHeaderBarIntervalMarkerOverviewJankCanvas intervalMarkerTimelineCanvas"
                  onMouseDown={[Function]}
                  onMouseMove={[Function]}
                  onMouseOut={[Function]}
                  onMouseUp={[Function]}
                />
              </div>
              <div
                className="threadStackGraph"
              >
                <canvas
                  className="threadStackGraphCanvas threadStackGraphCanvas"
                  onMouseUp={[Function]}
                />
              </div>
              <div
                className="headerEmptyThreadIndicator"
              >
                <div
                  className="headerEmptyThreadIndicatorBlock headerEmptyThreadIndicatorStartup"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  style={
                    Object {
                      "left": 0,
                      "width": 66.66666666666667,
                    }
                  }
                />
                <div
                  className="headerEmptyThreadIndicatorBlock headerEmptyThreadIndicatorShutdown"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  style={
                    Object {
                      "right": 0,
                      "width": 66.66666666666667,
                    }
                  }
                />
                <div
                  className="headerEmptyThreadIndicatorBlock headerEmptyThreadIndicatorEmptyBuffer"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  style={
                    Object {
                      "left": 66.66666666666667,
                      "width": 66.66666666666667,
                    }
                  }
                />
              </div>
            </div>
          </li>
          <li
            className="profileThreadHeaderBar"
            onClick={[Function]}
            style={undefined}
          >
            <div
              className="react-contextmenu-wrapper grippy profileThreadHeaderBarThreadLabel"
              onContextMenu={[Function]}
              onMouseDown={[Function]}
              onMouseOut={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchStart={[Function]}
              title="thread: \\"Thread with dropped samples\\" (0)
process: \\"default\\" (0)"
            >
              <h1
                className="profileThreadHeaderBarThreadName"
              >
                Thread with dropped samples
              </h1>
            </div>
            <div
              className="profileThreadHeaderBarThreadDetails"
            >
              <div
                className="profileThreadHeaderBarIntervalMarkerOverview profileThreadHeaderBarIntervalMarkerOverviewJank"
              >
                <canvas
                  className="profileThreadHeaderBarIntervalMarkerOverviewCanvas profileThreadHeaderBarIntervalMarkerOverviewJankCanvas intervalMarkerTimelineCanvas"
                  onMouseDown={[Function]}
                  onMouseMove={[Function]}
                  onMouseOut={[Function]}
                  onMouseUp={[Function]}
                />
              </div>
              <div
                className="threadStackGraph"
              >
                <canvas
                  className="threadStackGraphCanvas threadStackGraphCanvas"
                  onMouseUp={[Function]}
                />
              </div>
              <div
                className="headerEmptyThreadIndicator"
              >
                <div
                  className="headerEmptyThreadIndicatorBlock headerEmptyThreadIndicatorStartup"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  style={
                    Object {
                      "left": 0,
                      "width": 66.66666666666667,
                    }
                  }
                />
                <div
                  className="headerEmptyThreadIndicatorBlock headerEmptyThreadIndicatorShutdown"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  style={
                    Object {
                      "right": 0,
                      "width": 66.66666666666667,
                    }
                  }
                />
                <div
                  className="headerEmptyThreadIndicatorBlock headerEmptyThreadIndicatorEmptyBuffer"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                  style={
                    Object {
                      "left": 66.66666666666667,
                      "width": 66.66666666666667,
                    }
                  }
                />
              </div>
            </div>
          </li>
        </ol>
      </div>
    </div>
  </div>
  <div
    className="timeSelectionScrubberHoverIndicator"
    style={
      Object {
        "left": "0",
        "visibility": "hidden",
      }
    }
  />
</div>
`;

exports[`calltree/ProfileViewerHeader renders the header 2`] = `
Array [
  Array [
    "set fillStyle",
    "#45a1ff",
  ],
  Array [
    "fillRect",
    0,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    22.22222222222222,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    44.44444444444444,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    66.66666666666666,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    88.88888888888889,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    111.11111111111111,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    133.33333333333331,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    155.55555555555554,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "fillRect",
    177.77777777777777,
    NaN,
    22.22222222222222,
    NaN,
  ],
  Array [
    "set fillStyle",
    "#003eaa",
  ],
  Array [
    "set fillStyle",
    "#45a1ff",
  ],
  Array [
    "fillRect",
    88.88888888888889,
    0,
    22.22222222222222,
    300,
  ],
  Array [
    "fillRect",
    111.11111111111111,
    0,
    22.22222222222222,
    300,
  ],
  Array [
    "fillRect",
    133.33333333333331,
    75,
    22.22222222222222,
    225,
  ],
  Array [
    "set fillStyle",
    "#003eaa",
  ],
  Array [
    "set fillStyle",
    "#45a1ff",
  ],
  Array [
    "fillRect",
    88.88888888888889,
    0,
    22.22222222222222,
    300,
  ],
  Array [
    "fillRect",
    111.11111111111111,
    0,
    22.22222222222222,
    300,
  ],
  Array [
    "fillRect",
    133.33333333333331,
    75,
    22.22222222222222,
    225,
  ],
  Array [
    "set fillStyle",
    "#003eaa",
  ],
  Array [
    "clearRect",
    0,
    0,
    300,
    300,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "clearRect",
    0,
    0,
    300,
    300,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "clearRect",
    0,
    0,
    300,
    300,
  ],
  Array [
    "scale",
    1,
    1,
  ],
  Array [
    "scale",
    1,
    1,
  ],
]
`;
