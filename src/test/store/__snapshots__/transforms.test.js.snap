// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"focus-subtree" transform on a call tree can be filtered to a subtree 1`] = `
"
- C (total: 2, self:—)
 - D (total: 1, self:—)
   - E (total: 1, self:1)
 - F (total: 1, self:—)
   - G (total: 1, self:1)"
`;

exports[`"focus-subtree" transform on a call tree can remove the transform 1`] = `
"
- A (total: 3, self:—)
 - B (total: 3, self:—)
   - C (total: 2, self:—)
     - D (total: 1, self:—)
       - E (total: 1, self:1)
     - F (total: 1, self:—)
       - G (total: 1, self:1)
   - H (total: 1, self:—)
     - I (total: 1, self:1)"
`;

exports[`"focus-subtree" transform on a call tree starts as an unfiltered call tree 1`] = `
"
- A (total: 3, self:—)
 - B (total: 3, self:—)
   - C (total: 2, self:—)
     - D (total: 1, self:—)
       - E (total: 1, self:1)
     - F (total: 1, self:—)
       - G (total: 1, self:1)
   - H (total: 1, self:—)
     - I (total: 1, self:1)"
`;

exports[`"focus-subtree" transform on an inverted call tree can be filtered to a subtree 1`] = `
"
- X (total: 2, self:2)
 - B (total: 1, self:—)
   - A (total: 1, self:—)
 - C (total: 1, self:—)
   - B (total: 1, self:—)
     - A (total: 1, self:—)"
`;

exports[`"focus-subtree" transform on an inverted call tree can be un-inverted and keep the transform 1`] = `
"
- A (total: 2, self:—)
 - B (total: 2, self:—)
   - C (total: 1, self:—)
     - X (total: 1, self:1)
   - X (total: 1, self:1)"
`;

exports[`"focus-subtree" transform on an inverted call tree starts as an inverted call tree 1`] = `
"
- Z (total: 2, self:2)
 - Y (total: 2, self:—)
   - X (total: 2, self:—)
     - B (total: 1, self:—)
       - A (total: 1, self:—)
     - C (total: 1, self:—)
       - B (total: 1, self:—)
         - A (total: 1, self:—)
- E (total: 1, self:1)
 - D (total: 1, self:—)
   - C (total: 1, self:—)
     - B (total: 1, self:—)
       - A (total: 1, self:—)"
`;

exports[`"merge-call-node" transform on a JS call tree can merge a combined CallNodePath, and display a correct JS call tree 1`] = `
"
- onLoad (total: 3, self:—)
 - a (total: 2, self:—)
   - b (total: 2, self:2)
 - b (total: 1, self:1)"
`;

exports[`"merge-call-node" transform on a JS call tree can merge path [b, a, js::jit::IonCannon] on an inverted call tree 1`] = `
"
- b (total: 3, self:3)
 - a (total: 3, self:—)
   - onLoad (total: 3, self:—)
     - JS::RunScript (total: 3, self:—)"
`;

exports[`"merge-call-node" transform on a JS call tree can merge path [b, a, onLoad] on an inverted JS call tree 1`] = `
"
- b (total: 3, self:3)
 - a (total: 3, self:—)
   - js::jit::IonCannon (total: 2, self:—)
     - JS::RunScript (total: 2, self:—)
   - JS::RunScript (total: 1, self:—)"
`;

exports[`"merge-call-node" transform on a JS call tree can merge the node at JS path "onLoad" -> "A" 1`] = `
"
- onLoad (total: 3, self:—)
 - b (total: 3, self:3)"
`;

exports[`"merge-call-node" transform on a JS call tree can merge the node at JS path "onLoad" -> "A" on an combined call tree 1`] = `
"
- JS::RunScript (total: 3, self:—)
 - onLoad (total: 3, self:—)
   - js::jit::IonCannon (total: 2, self:—)
     - b (total: 2, self:2)
   - b (total: 1, self:1)"
`;

exports[`"merge-call-node" transform on a JS call tree has an untransformed JS only view 1`] = `
"
- onLoad (total: 3, self:—)
 - a (total: 3, self:—)
   - b (total: 3, self:3)"
`;

exports[`"merge-call-node" transform on a JS call tree starts as an inverted call tree 1`] = `
"
- b (total: 3, self:3)
 - a (total: 3, self:—)
   - js::jit::IonCannon (total: 2, self:—)
     - onLoad (total: 2, self:—)
       - JS::RunScript (total: 2, self:—)
   - onLoad (total: 1, self:—)
     - JS::RunScript (total: 1, self:—)"
`;

exports[`"merge-call-node" transform on a JS call tree starts as an untransformed call tree 1`] = `
"
- JS::RunScript (total: 3, self:—)
 - onLoad (total: 3, self:—)
   - js::jit::IonCannon (total: 2, self:—)
     - a (total: 2, self:—)
       - b (total: 2, self:2)
   - a (total: 1, self:—)
     - b (total: 1, self:1)"
`;

exports[`"merge-call-node" transform on a call tree call node [A, B, C] can be merged into [A, B] 1`] = `
"
- A (total: 3, self:—)
 - B (total: 3, self:—)
   - D (total: 1, self:—)
     - E (total: 1, self:1)
   - F (total: 1, self:—)
     - G (total: 1, self:1)
   - H (total: 1, self:—)
     - I (total: 1, self:1)"
`;

exports[`"merge-call-node" transform on a call tree starts as an unfiltered call tree 1`] = `
"
- A (total: 3, self:—)
 - B (total: 3, self:—)
   - C (total: 2, self:—)
     - D (total: 1, self:—)
       - E (total: 1, self:1)
     - F (total: 1, self:—)
       - G (total: 1, self:1)
   - H (total: 1, self:—)
     - I (total: 1, self:1)"
`;
